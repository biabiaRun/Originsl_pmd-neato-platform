/****************************************************************************\
* Copyright (C) 2015 Infineon Technologies
*
* THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
* KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
* PARTICULAR PURPOSE.
*
\****************************************************************************/

#pragma once

namespace royale
{
    namespace imager
    {
        //!< The register addresses for A11 and B11/B12 are equivalent (only the default reset values have changed)
        namespace M2452
        {
            const uint16_t ANAIP_DPHYBGEN =           0xa000; //DPHY bandgap enable
            const uint16_t ANAIP_DPHYPLLPWD =         0xa001; //DPHY PLL powerdown settings
            const uint16_t ANAIP_DPHYPLLRESET =       0xa002; //DPHY PLL reset
            const uint16_t ANAIP_DPHYPHYEN =          0xa003; //DPHY PHY enable
            const uint16_t ANAIP_DPHYPHYRESET =       0xa004; //DPHY PHY reset
            const uint16_t ANAIP_PIXREFBGEN =         0xa005; //Pixel reference bandgap enable
            const uint16_t ANAIP_PIXREFEN =           0xa006; //Pixel reference source enable
            const uint16_t ANAIP_PLLBGEN =            0xa007; //PLL bandgap enable
            const uint16_t ANAIP_PLLPWD =             0xa008; //PLL powerdown settings
            const uint16_t ANAIP_PLLRESET =           0xa009; //PLL reset
            const uint16_t ANAIP_VMODREG =            0xa00a; //VMOD Regulator configuration
            const uint16_t ANAIP_ADCBGEN =            0xa00b; //ADC bandgap enable
            const uint16_t ANAIP_ADCEN =              0xa00c; //ADC enable register
            const uint16_t ANAIP_ADCRESET =           0xa00d; //ADC reset
            const uint16_t ANAIP_ADCBIST1CFG1 =       0xa00e; //ADC BIST 1 configuration register 1
            const uint16_t ANAIP_ADCBIST2CFG1 =       0xa00f; //ADC BIST 2 configuration register 1
            const uint16_t ANAIP_PIXIFEN =            0xa010; //Pixel Interface enable
            const uint16_t ANAIP_SENSEN =             0xa011; //SENSORE CORE enable
            const uint16_t ANAIP_SENSREFI =           0xa012; //SENSOR CORE reference current selection
            const uint16_t ANAIP_SENSTEST =           0xa013; //SENSOR_CORE test register
            const uint16_t ANAIP_GPIOMUX0 =           0xa014; //GPIO0-2 test multiplexer select
            const uint16_t ANAIP_GPIOMUX1 =           0xa015; //GPIO3-5 test multiplexer select
            const uint16_t ANAIP_GPIOMUX2 =           0xa016; //GPIO6-8 test multiplexer select
            const uint16_t ANAIP_GPIOMUX3 =           0xa017; //GPO9-11 test multiplexer select
            const uint16_t ANAIP_GPIOMUX4 =           0xa018; //GPO12 test multiplexer select
            const uint16_t ANAIP_MODPADMUX =          0xa019; //Modulation Pads test output multiplexer select
            const uint16_t ANAIP_GPIO_CLK_CFG1 =      0xa01a; //CLK selection and divider configuration 1
            const uint16_t ANAIP_GPIO_CLK_CFG2 =      0xa01b; //CLK selection and divider configuration 2
            const uint16_t ANAIP_PADGPIOCFG0 =        0xa01c; //GPIO0-1 pad configurations
            const uint16_t ANAIP_PADGPIOCFG1 =        0xa01d; //GPIO2-3 pad configurations
            const uint16_t ANAIP_PADGPIOCFG2 =        0xa01e; //GPIO4-5 pad configurations
            const uint16_t ANAIP_PADGPIOCFG3 =        0xa01f; //GPIO6-7 pad configurations
            const uint16_t ANAIP_PADGPIOCFG4 =        0xa020; //GPIO8 pad configurations
            const uint16_t ANAIP_PADGPIOCFG5 =        0xa021; //GPIO9-12 pad configurations
            const uint16_t ANAIP_PADSDASCL =          0xa022; //SDA SCL pad configurations
            const uint16_t ANAIP_ADCBGCFG =           0xa023; //ADC bandgap configuration register
            const uint16_t ANAIP_ADCBGAMUX =          0xa024; //ADC bandgap amux
            const uint16_t ANAIP_ADCIFCFG =           0xa025; //ADC IF configuration register
            const uint16_t ANAIP_ADCIFTEST0 =         0xa026; //ADC IF test mode configuration and pattern 0 register
            const uint16_t ANAIP_ADCIFTEST1 =         0xa027; //ADC IF test mode configuration and pattern 1 register
            const uint16_t ANAIP_ADCCFG1 =            0xa028; //ADC configuration register
            const uint16_t ANAIP_ADCCFG2 =            0xa029; //ADC configuration register
            const uint16_t ANAIP_ADCBIST1CFG2 =       0xa02a; //ADC BIST 1 configuration register 2
            const uint16_t ANAIP_ADCBIST1CFG3 =       0xa02b; //ADC BIST 1 configuration register 3
            const uint16_t ANAIP_ADCBIST1CFG4 =       0xa02c; //ADC BIST 1 configuration register 4
            const uint16_t ANAIP_ADCBIST2CFG2 =       0xa02d; //ADC BIST 2 configuration register 2
            const uint16_t ANAIP_ADCBIST2CFG3 =       0xa02e; //ADC BIST 2 configuration register 3
            const uint16_t ANAIP_ADCBIST2CFG4 =       0xa02f; //ADC BIST 2 configuration register 4
            const uint16_t ANAIP_ADCBIST1AMUX =       0xa030; //ADC BIST 1 amux enable
            const uint16_t ANAIP_ADCBIST2AMUX =       0xa031; //ADC BIST 2 amux enable
            const uint16_t ANAIP_ADCTESTCTRL =        0xa032; //ADC Test Mode Control
            const uint16_t ANAIP_ADCTEST0 =           0xa033; //ADC Test Mode Support register 0
            const uint16_t ANAIP_ADCTEST1 =           0xa034; //ADC Test Mode Support register 1
            const uint16_t ANAIP_ADCTESTSTAT =        0xa035; //ADC TestControler Status
            const uint16_t ANAIP_ROMMISR0 =           0xa036; //Memory BIST ROM MISR Register 0
            const uint16_t ANAIP_ROMMISR1 =           0xa037; //Memory BIST ROM MISR Register 1
            const uint16_t ANAIP_MBISTCFG =           0xa038; //Memory Bist Configuration Register
            const uint16_t ANAIP_MBISTSTAT =          0xa039; //Memory BIST Status Register
            const uint16_t ANAIP_FMUCTRL =            0xa03a; //FMU control register
            const uint16_t ANAIP_FMUCFG1 =            0xa03b; //FMU configuration register 1
            const uint16_t ANAIP_FMUCFG2 =            0xa03c; //FMU configuration register 2
            const uint16_t ANAIP_FMURESULT =          0xa03d; //FMU result register
            const uint16_t ANAIP_FMUSTAT =            0xa03e; //FMU status register
            const uint16_t ANAIP_CMC =                0xa03f; //Chip Mode Configuration Regsiter
            const uint16_t ANAIP_ADCBIST1MUX_EVEN_S0 = 0xa040; //ADC BIST1 MUX even setting 0
            const uint16_t ANAIP_ADCBIST1MUX_ODD_S0 = 0xa041; //ADC BIST1 MUX odd setting 0
            const uint16_t ANAIP_ADCBIST2MUX_EVEN_S0 = 0xa042; //ADC BIST2 MUX  even setting 0
            const uint16_t ANAIP_ADCBIST2MUX_ODD_S0 = 0xa043; //ADC BIST2 MUX  odd setting 0
            const uint16_t ANAIP_ADCBIST1MUX_EVEN_S1 = 0xa044; //ADC BIST1 MUX even setting 1
            const uint16_t ANAIP_ADCBIST1MUX_ODD_S1 = 0xa045; //ADC BIST1 MUX odd setting 1
            const uint16_t ANAIP_ADCBIST2MUX_EVEN_S1 = 0xa046; //ADC BIST2 MUX  even setting 1
            const uint16_t ANAIP_ADCBIST2MUX_ODD_S1 = 0xa047; //ADC BIST2 MUX  odd setting 1
            const uint16_t ANAIP_PIXIF1 =             0xa048; //Pixel Interface configuration 1
            const uint16_t ANAIP_PIXIF2 =             0xa049; //Pixel Interface configuration 2
            const uint16_t ANAIP_PIXIF3 =             0xa04a; //Pixel Interface configuration 3
            const uint16_t ANAIP_PIXIF4 =             0xa04b; //Pixel Interface configuration 4
            const uint16_t ANAIP_PIXIF5 =             0xa04c; //Pixel Interface configuration 5
            const uint16_t ANAIP_PIXIF6 =             0xa04d; //Pixel Interface configuration 6
            const uint16_t ANAIP_PIXIF7 =             0xa04e; //Pixel Interface configuration 7
            const uint16_t ANAIP_PIXIF8 =             0xa04f; //Pixel Interface configuration 8
            const uint16_t ANAIP_PIXIFBCS =           0xa050; //Pixel interface bias current selection
            const uint16_t ANAIP_PIXREFTRIM =         0xa051; //Pixel reference trimming values
            const uint16_t ANAIP_PIXREFAMUXTEST =     0xa052; //Pixel reference amux and test settings
            const uint16_t ANAIP_PSUPCFG =            0xa053; //PSUP configuration register
            const uint16_t ANAIP_PLLBG =              0xa054; //PLL bandgap settings
            const uint16_t ANAIP_PLLCFG1 =            0xa055; //PLL configuration register 1
            const uint16_t ANAIP_PLLCFG2 =            0xa056; //PLL configuration register 2
            const uint16_t ANAIP_PLLCFG3 =            0xa057; //PLL configuration register 3
            const uint16_t ANAIP_PLLCFG4 =            0xa058; //PLL configuration register 4
            const uint16_t ANAIP_PLLCFG5 =            0xa059; //PLL configuration register 5
            const uint16_t ANAIP_PLLCFG6 =            0xa05a; //PLL configuration register 6
            const uint16_t ANAIP_PLLCFG7 =            0xa05b; //PLL configuration register 7
            const uint16_t ANAIP_PLLCFG8 =            0xa05c; //PLL configuration register 8
            const uint16_t ANAIP_PLLDFT =             0xa05d; //PLL DFT configuration register
            const uint16_t ANAIP_DPHYCLKCFG1 =        0xa05e; //DPHY CLK configuration register 1
            const uint16_t ANAIP_DPHYCLKCFG2 =        0xa05f; //DPHY CLK configuration register 2
            const uint16_t ANAIP_DPHYCLANECFG1 =      0xa060; //DPHY CLANE configuration register 1
            const uint16_t ANAIP_DPHYCLANECFG2 =      0xa061; //DPHY CLANE configuration register 2
            const uint16_t ANAIP_DPHYCLANECFG3 =      0xa062; //DPHY CLANE configuration register 3
            const uint16_t ANAIP_DPHYDLANE1CFG1 =     0xa063; //DPHY DLANE 1 configuration register 1
            const uint16_t ANAIP_DPHYDLANE1CFG2 =     0xa064; //DPHY DLANE 1 configuration register 2
            const uint16_t ANAIP_DPHYDLANE1CFG3 =     0xa065; //DPHY DLANE 1 configuration register 3
            const uint16_t ANAIP_DPHYDLANE2CFG1 =     0xa066; //DPHY DLANE 2 configuration register 1
            const uint16_t ANAIP_DPHYDLANE2CFG2 =     0xa067; //DPHY DLANE 2 configuration register 2
            const uint16_t ANAIP_DPHYDLANE2CFG3 =     0xa068; //DPHY DLANE 2 configuration register 3
            const uint16_t ANAIP_DPHYPLLCFG1 =        0xa069; //DPHY PLL configuration register 1
            const uint16_t ANAIP_DPHYPLLCFG2 =        0xa06a; //DPHY PLL configuration register 2
            const uint16_t ANAIP_DPHYPLLCFG3 =        0xa06b; //DPHY PLL configuration register 3
            const uint16_t ANAIP_DPHYPLLCFG4 =        0xa06c; //DPHY PLL configuration register 4
            const uint16_t ANAIP_DPHYPLLCFG5 =        0xa06d; //DPHY PLL configuration register 5
            const uint16_t ANAIP_DPHYPLLCFG6 =        0xa06e; //DPHY PLL configuration register 6
            const uint16_t ANAIP_DPHYPLLCFG7 =        0xa06f; //DPHY PLL configuration register 7
            const uint16_t ANAIP_DPHYPLLCFG8 =        0xa070; //DPHY PLL configuration register 8
            const uint16_t ANAIP_DPHYPHYCFG1 =        0xa071; //DPHY PHY configuration register 1
            const uint16_t ANAIP_DPHYPHYCFG2 =        0xa072; //DPHY PHY configuration register 2
            const uint16_t ANAIP_DPHYPHYCFG3 =        0xa073; //DPHY PHY configuration register 3
            const uint16_t ANAIP_DPHYBGCFG =          0xa074; //DPHY bandgap configuration register
            const uint16_t ANAIP_DPHYDFTPLL1 =        0xa075; //DPHY DFT PLL configuration register 1
            const uint16_t ANAIP_DPHYDFTPLL2 =        0xa076; //DPHY DFT PLL configuration register 2
            const uint16_t ANAIP_DPHYDFTPHY1 =        0xa077; //DPHY DFT PHY configuration register 1
            const uint16_t ANAIP_DPHYDFTPHY2 =        0xa078; //DPHY DFT PHY configuration register 2
            const uint16_t ANAIP_DPHYDFTPHYCLANE =    0xa079; //DPHY DFT PHY CLANE configuration register
            const uint16_t ANAIP_DPHYDFTPHYDLANE1CFG1 = 0xa07a; //DPHY DFT PHY DLANE1 configuration register 1
            const uint16_t ANAIP_DPHYDFTPHYDLANE1CFG2 = 0xa07b; //DPHY DFT PHY DLANE1 configuration register 2
            const uint16_t ANAIP_DPHYDFTPHYDLANE2CFG1 = 0xa07c; //DPHY DFT PHY DLANE2 configuration register 1
            const uint16_t ANAIP_DPHYDFTPHYDLANE2CFG2 = 0xa07d; //DPHY DFT PHY DLANE2 configuration register 2
            const uint16_t ANAIP_I2CADDR =            0xa07e; //I2C Address
            const uint16_t ANAIP_PSCFG =              0xa07f; //Phaseshifter configuration register
            const uint16_t ANAIP_PS =                 0xa080; //Phaseshifter divider and gray selection
            const uint16_t ANAIP_PSTESTMODE =         0xa081; //Phaseshifter testmode register
            const uint16_t ANAIP_SENMUX =             0xa082; //Multiplexer selection for SE_N output
            const uint16_t ANAIP_SEPMUX =             0xa083; //Multiplexer selection for SE_P output
            const uint16_t ANAIP_PSPADCFG =           0xa084; //Phaseshifter SE PAD Configuration
            const uint16_t ANAIP_AMUXCH0_UB =         0xa085; //AMUX channel 0 unbuffered config
            const uint16_t ANAIP_AMUXCH0_B =          0xa086; //AMUX channel 0 buffered config
            const uint16_t ANAIP_AMUXCH1_UB =         0xa087; //AMUX channel 1 unbuffered config
            const uint16_t ANAIP_AMUXCH1_B =          0xa088; //AMUX channel 1 buffered config
            const uint16_t ANAIP_AMUXCH2_UB =         0xa089; //AMUX channel 2 unbuffered config
            const uint16_t ANAIP_AMUXCH2_B =          0xa08a; //AMUX channel 2 buffered config
            const uint16_t ANAIP_AMUXCH3_UB =         0xa08b; //AMUX channel 3 unbuffered config
            const uint16_t ANAIP_AMUXCH3_B =          0xa08c; //AMUX channel 3 buffered config
            const uint16_t ANAIP_AMUXCH4_UB =         0xa08d; //AMUX channel 4 unbuffered config
            const uint16_t ANAIP_AMUXCH4_B =          0xa08e; //AMUX channel 4 buffered config
            const uint16_t ANAIP_AMUXCH6_UB =         0xa08f; //AMUX channel 6 unbuffered config
            const uint16_t ANAIP_AMUXCH6_B =          0xa090; //AMUX channel 6 buffered config
            const uint16_t ANAIP_AMUXCH7_UB =         0xa091; //AMUX channel 7 unbuffered config
            const uint16_t ANAIP_AMUXCH7_B =          0xa092; //AMUX channel 7 buffered config
            const uint16_t ANAIP_AMUXCH8_UB =         0xa093; //AMUX channel 8 unbuffered config
            const uint16_t ANAIP_AMUXCH8_B =          0xa094; //AMUX channel 8 buffered config
            const uint16_t ANAIP_AMUXSEL17 =          0xa095; //AMUX select 17 all channels config
            const uint16_t ANAIP_AMUXCFG =            0xa096; //AMUX config register
            const uint16_t ANAIP_AMUXCFG2 =           0xa097; //AMUX config register 2
            const uint16_t ANAIP_AMUXPADEN =          0xa098; //AMUX channel output enable
            const uint16_t ANAIP_EFUSEPSWRD =         0xa099; //Password for eFuse
            const uint16_t ANAIP_DPHYBISTSTAT1 =      0xa09a; //DPHY BIST Status register 1
            const uint16_t ANAIP_DPHYBISTSTAT2 =      0xa09b; //DPHY BIST Status register 2
            const uint16_t ANAIP_DPHYBISTSTAT3 =      0xa09c; //DPHY BIST Status register 3
            const uint16_t ANAIP_DPHYBISTSTAT4 =      0xa09d; //DPHY BIST Status register 4
            const uint16_t ANAIP_DPHYBISTSTAT5 =      0xa09e; //DPHY BIST Status register 5
            const uint16_t ANAIP_TSENS =              0xa09f; //Temperature Sensor configurations
            const uint16_t ANAIP_EFUSECTRL =          0xa0a0; //EFUSE control register
            const uint16_t ANAIP_EFUSEVAL1 =          0xa0a1; //EFUSE Value 1
            const uint16_t ANAIP_EFUSEVAL2 =          0xa0a2; //EFUSE Value 2
            const uint16_t ANAIP_EFUSEVAL3 =          0xa0a3; //EFUSE Value 3
            const uint16_t ANAIP_EFUSEVAL4 =          0xa0a4; //EFUSE Value 4
            const uint16_t ANAIP_DESIGNSTEP =         0xa0a5; //Design Step
            const uint16_t CFGCNT_S00_EXPOTIME =      0x9800; //Sequence0 sequence exposure time
            const uint16_t CFGCNT_S00_FRAMERATE =     0x9801; //Sequence0 Fixed Framerate
            const uint16_t CFGCNT_S00_PS =            0x9802; //Sequence0 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S01_EXPOTIME =      0x9803; //Sequence1 sequence exposure time
            const uint16_t CFGCNT_S01_FRAMERATE =     0x9804; //Sequence1 Fixed Framerate
            const uint16_t CFGCNT_S01_PS =            0x9805; //Sequence1 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S02_EXPOTIME =      0x9806; //Sequence2 sequence exposure time
            const uint16_t CFGCNT_S02_FRAMERATE =     0x9807; //Sequence2 Fixed Framerate
            const uint16_t CFGCNT_S02_PS =            0x9808; //Sequence2 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S03_EXPOTIME =      0x9809; //Sequence3 sequence exposure time
            const uint16_t CFGCNT_S03_FRAMERATE =     0x980a; //Sequence3 Fixed Framerate
            const uint16_t CFGCNT_S03_PS =            0x980b; //Sequence3 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S04_EXPOTIME =      0x980c; //Sequence4 sequence exposure time
            const uint16_t CFGCNT_S04_FRAMERATE =     0x980d; //Sequence4 Fixed Framerate
            const uint16_t CFGCNT_S04_PS =            0x980e; //Sequence4 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S05_EXPOTIME =      0x980f; //Sequence5 sequence exposure time
            const uint16_t CFGCNT_S05_FRAMERATE =     0x9810; //Sequence5 Fixed Framerate
            const uint16_t CFGCNT_S05_PS =            0x9811; //Sequence5 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S06_EXPOTIME =      0x9812; //Sequence6 sequence exposure time
            const uint16_t CFGCNT_S06_FRAMERATE =     0x9813; //Sequence6 Fixed Framerate
            const uint16_t CFGCNT_S06_PS =            0x9814; //Sequence6 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S07_EXPOTIME =      0x9815; //Sequence7 sequence exposure time
            const uint16_t CFGCNT_S07_FRAMERATE =     0x9816; //Sequence7 Fixed Framerate
            const uint16_t CFGCNT_S07_PS =            0x9817; //Sequence7 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S08_EXPOTIME =      0x9818; //Sequence8 sequence exposure time
            const uint16_t CFGCNT_S08_FRAMERATE =     0x9819; //Sequence8 Fixed Framerate
            const uint16_t CFGCNT_S08_PS =            0x981a; //Sequence8 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S09_EXPOTIME =      0x981b; //Sequence9 sequence exposure time
            const uint16_t CFGCNT_S09_FRAMERATE =     0x981c; //Sequence9 Fixed Framerate
            const uint16_t CFGCNT_S09_PS =            0x981d; //Sequence9 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S10_EXPOTIME =      0x981e; //Sequence10 sequence exposure time
            const uint16_t CFGCNT_S10_FRAMERATE =     0x981f; //Sequence10 Fixed Framerate
            const uint16_t CFGCNT_S10_PS =            0x9820; //Sequence10 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S11_EXPOTIME =      0x9821; //Sequence11 sequence exposure time
            const uint16_t CFGCNT_S11_FRAMERATE =     0x9822; //Sequence11 Fixed Framerate
            const uint16_t CFGCNT_S11_PS =            0x9823; //Sequence11 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S12_EXPOTIME =      0x9824; //Sequence12 sequence exposure time
            const uint16_t CFGCNT_S12_FRAMERATE =     0x9825; //Sequence12 Fixed Framerate
            const uint16_t CFGCNT_S12_PS =            0x9826; //Sequence12 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S13_EXPOTIME =      0x9827; //Sequence13 sequence exposure time
            const uint16_t CFGCNT_S13_FRAMERATE =     0x9828; //Sequence13 Fixed Framerate
            const uint16_t CFGCNT_S13_PS =            0x9829; //Sequence13 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S14_EXPOTIME =      0x982a; //Sequence14 sequence exposure time
            const uint16_t CFGCNT_S14_FRAMERATE =     0x982b; //Sequence14 Fixed Framerate
            const uint16_t CFGCNT_S14_PS =            0x982c; //Sequence14 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S15_EXPOTIME =      0x982d; //Sequence15 sequence exposure time
            const uint16_t CFGCNT_S15_FRAMERATE =     0x982e; //Sequence15 Fixed Framerate
            const uint16_t CFGCNT_S15_PS =            0x982f; //Sequence15 Phaseshifter and PLL settings
            const uint16_t CFGCNT_S16_EXPOTIME =      0x9830; //Sequence16 sequence exposure time
            const uint16_t CFGCNT_S16_FRAMERATE =     0x9831; //Sequence16 Fixed Framerate
            const uint16_t CFGCNT_S16_PS =            0x9832; //Sequence16 Phaseshifter and PLL settings
            const uint16_t CFGCNT_TRIG =              0x9833; //Trigger signals
            const uint16_t CFGCNT_STATUS =            0x9834; //Status register
            const uint16_t CFGCNT_CSICFG =            0x9835; //CSI Configuration
            const uint16_t CFGCNT_ROICOL =            0x9836; //Region of interest for columns (X)
            const uint16_t CFGCNT_ROIROW =            0x9837; //Region of interest for rows (Y)
            const uint16_t CFGCNT_ROS =               0x9838; //Readout settings register 1
            const uint16_t CFGCNT_CTRLSEQ =           0x9839; //Sequence settings
            const uint16_t CFGCNT_EXPCFG1 =           0x983a; //Preillu time settings
            const uint16_t CFGCNT_EXPCFG2 =           0x983b; //Warm up time settings
            const uint16_t CFGCNT_PSOUT =             0x983c; //Phaseshifter illumination settings
            const uint16_t CFGCNT_PLLCFG1_LUT1 =      0x983d; //PLL configuration register 1
            const uint16_t CFGCNT_PLLCFG2_LUT1 =      0x983e; //PLL configuration register 2
            const uint16_t CFGCNT_PLLCFG3_LUT1 =      0x983f; //PLL configuration register 3
            const uint16_t CFGCNT_PLLCFG1_LUT2 =      0x9840; //PLL configuration register 1
            const uint16_t CFGCNT_PLLCFG2_LUT2 =      0x9841; //PLL configuration register 2
            const uint16_t CFGCNT_PLLCFG3_LUT2 =      0x9842; //PLL configuration register 3
            const uint16_t CFGCNT_PLLCFG1_LUT3 =      0x9843; //PLL configuration register 1
            const uint16_t CFGCNT_PLLCFG2_LUT3 =      0x9844; //PLL configuration register 2
            const uint16_t CFGCNT_PLLCFG3_LUT3 =      0x9845; //PLL configuration register 3
            const uint16_t CFGCNT_PLLCFG1_LUT4 =      0x9846; //PLL configuration register 1
            const uint16_t CFGCNT_PLLCFG2_LUT4 =      0x9847; //PLL configuration register 2
            const uint16_t CFGCNT_PLLCFG3_LUT4 =      0x9848; //PLL configuration register 3
            const uint16_t CSI2_CSIFCTRL =            0x8000; //Frame Control
            const uint16_t CSI2_CSIHSIZE =            0x8001; //Horizontal Size
            const uint16_t CSI2_CSIVSIZE =            0x8002; //Vertical Size
            const uint16_t CSI2_CSICFG =              0x8003; //CSI Configuration
            const uint16_t CSI2_CSISTAT =             0x8004; //CSI Status
            const uint16_t CSI2_CSIDBADDR =           0x8005; //Data Buffer Address
            const uint16_t CSI2_CSIPDBADDR =          0x8006; //Pseudo Data Buffer Address
            const uint16_t CSI2_CLCFG =               0x8007; //Clock lane configuration
            const uint16_t MTCU_LPFSMEN =             0x9000; //Low Power FSM control register
            const uint16_t MTCU_LPFSMFRATE =          0x9001; //LPFSM Framerate
            const uint16_t MTCU_LPFSMDEL1 =           0x9002; //LPFSM DPHYPLL delay register 1
            const uint16_t MTCU_LPFSMDEL2 =           0x9003; //LPFSM DPHYPLL delay register 2
            const uint16_t MTCU_EN =                  0x9004; //MTCU control register
            const uint16_t MTCU_STATUS =              0x9005; //MTCU status register
            const uint16_t MTCU_ROICOL =              0x9010; //Region of interest for columns (X)
            const uint16_t MTCU_ROIROW =              0x9011; //Region of interest for rows (Y)
            const uint16_t MTCU_ROS1 =                0x9012; //Readout settings register 1
            const uint16_t MTCU_CTRLSEQ =             0x9013; //Sequence settings
            const uint16_t MTCU_EXPCFG1 =             0x9014; //Preillu time settings
            const uint16_t MTCU_EXPCFG2 =             0x9015; //Warm up time settings
            const uint16_t MTCU_PSOUT =               0x9016; //Phaseshifter output settings
            const uint16_t MTCU_EXPCFG3 =             0x9017; //Premodulation settings
            const uint16_t MTCU_EXPCFG4 =             0x9018; //Premodulation settings
            const uint16_t MTCU_EXPCFG5 =             0x9019; //Reset Hold settings
            const uint16_t MTCU_EXPCFG6 =             0x901a; //Global select settings
            const uint16_t MTCU_ROS2 =                0x901b; //Readout settings register 2
            const uint16_t MTCU_ROS3 =                0x901c; //Readout settings register 3
            const uint16_t MTCU_EXPOTIME =            0x901d; //Current sequence exposure time
            const uint16_t MTCU_FRAMERATE =           0x901e; //Current Fixed Framerate
            const uint16_t MTCU_PS =                  0x901f; //Phaseshifter phase settings
            const uint16_t MTCU_POWERCTRL =           0x9020; //Power Control configuration
            const uint16_t MTCU_DPHYDELAY =           0x9021; //DPHY delay register
            const uint16_t MTCU_PLLTIMER =            0x9022; //PLL timer register
            const uint16_t MTCU_MODPLLSTD =           0x9023; //MODPLL startup delay timer
            const uint16_t MTCU_STATEREG =            0x9024; //MTCU State Register
            const uint16_t MTCU_CCUSTATE =            0x9025; //CCU State Register
            const uint16_t MTCU_FRAMERATEVAL =        0x9026; //Current framerate counter value
            const uint16_t MTCU_SEQNUM =              0x9027; //Current sequence number value
            const uint16_t MTCU_TEST =                0x9028; //MTCU Test Mode Register
            const uint16_t ISMHWS_DMACTRL =           0x8800; //DMA Control
            const uint16_t ISMHWS_DMACFG =            0x8801; //DMA Configuration
            const uint16_t ISMHWS_DMASOURCE =         0x8802; //DMA Source Address
            const uint16_t ISMHWS_DMADESTIN =         0x8803; //DMA Destination Address
            const uint16_t ISMHWS_DMACOUNT =          0x8804; //DMA Transfer Count
            const uint16_t ISMHWS_DMASTATUS =         0x8805; //DMA Status
            const uint16_t ISMHWS_ICUBANKSEL =        0x8806; //Select the Interrupt  input bank
            const uint16_t ISMHWS_ICUPOLARITY =       0x8807; //ICU Irq Polarity
            const uint16_t ISMHWS_ICUEDGE =           0x8808; //ICU Edge
            const uint16_t ISMHWS_ICUSRCSEL =         0x8809; //ICU Source select
            const uint16_t ISMHWS_ICUMASKSET =        0x880a; //ICU Mask set
            const uint16_t ISMHWS_ICUMASKCLEAR =      0x880b; //ICU Mask clear
            const uint16_t ISMHWS_ICUIRQENSET =       0x880c; //ICU Irq enable set
            const uint16_t ISMHWS_ICUIRQENCLEAR =     0x880d; //ICU Irq enable clear
            const uint16_t ISMHWS_ICUIRQACK =         0x880e; //ICU Irq acknowledge
            const uint16_t ISMHWS_ICUPENDING =        0x880f; //ICU Irq Pending
            const uint16_t ISMHWS_ICUSTATUS =         0x8810; //ICU Status
            const uint16_t ISMHWS_ICUIRQPRIO1 =       0x8811; //ICU IRQ priority configuration 1
            const uint16_t ISMHWS_ICUIRQPRIO2 =       0x8812; //ICU IRQ priority configuration 2
            const uint16_t ISMHWS_ICUIRQPRIO3 =       0x8813; //ICU IRQ priority configuration 3
            const uint16_t ISMHWS_ICUIRQPRIO4 =       0x8814; //ICU IRQ priority configuration 4
            const uint16_t ISMHWS_TMR1MODE =          0x8815; //Timer 1 Mode
            const uint16_t ISMHWS_TMR1PREVAL =        0x8816; //Timer 1 Preload Value
            const uint16_t ISMHWS_TMR1CNTVAL =        0x8817; //Timer 1 Current Counter Value
            const uint16_t ISMHWS_TMR2MODE =          0x8818; //Timer 2 Mode
            const uint16_t ISMHWS_TMR2PREVAL =        0x8819; //Timer 2 Preload Value
            const uint16_t ISMHWS_TMR2CNTVAL =        0x881a; //Timer 2 Current Counter Value
            const uint16_t ISMHWS_CRC =               0x881b; //SFR CRC register
            const uint16_t ISM_EN =                   0xb400; //ISM enable
            const uint16_t ISM_CTRL =                 0xb401; //iSM control register
            const uint16_t ISM_MEMPAGE =              0xb402; //iSM instructiom memory page register
            const uint16_t ISM_IADDR =                0xb410; //iSM indirect Address Register
            const uint16_t ISM_IDATA =                0xb411; //iSM indirect Data Register
            const uint16_t ISM_DIVT =                 0xb412; //DIVT control register
            const uint16_t ISM_DIVT0_ADR =            0xb413; //DIVT jump address for vector 0 (reset)
            const uint16_t ISM_DIVT1_ADR =            0xb414; //DIVT jump address for vector 1
            const uint16_t ISM_DIVT2_ADR =            0xb415; //DIVT jump address for vector 2
            const uint16_t ISM_DIVT3_ADR =            0xb416; //DIVT jump address for vector 3
            const uint16_t ISM_DIVT4_ADR =            0xb417; //DIVT jump address for vector 4
            const uint16_t ISM_DIVT5_ADR =            0xb418; //DIVT jump address for vector 5
            const uint16_t ISM_DIVT6_ADR =            0xb419; //DIVT jump address for vector 6
            const uint16_t ISM_DIVT7_ADR =            0xb41a; //DIVT jump address for vector 7
            const uint16_t ISM_DIVTIRQSRC =           0xb41b; //DIVT irq source selection
            const uint16_t ISM_DIVTIRQSRC2 =          0xb41c; //DIVT irq source selection 2
            const uint16_t ISM_GPO =                  0xb41d; //General purpose outputs of iSM
            const uint16_t ISM_FUNCNUM =              0xb41e; //ISM Test number
            const uint16_t ISM_TESTRES =              0xb41f; //ISM Test result
            const uint16_t ISM_ISMSTATE =             0xb420; //ISM state
            const uint16_t ISM_HDU_CTRL =             0xb421; //iSM Hardware Debug Unit control
            const uint16_t ISM_HDU_BRKPNT_0 =         0xb422; //iSM HDU breakpoint 0
            const uint16_t ISM_HDU_BRKPNT_1 =         0xb423; //iSM HDU breakpoint 1
            const uint16_t ISM_HDU_BRKPNT_2 =         0xb424; //iSM HDU breakpoint 2
            const uint16_t ISM_HDU_BRKPNT_3 =         0xb425; //iSM HDU breakpoint 3
            const uint16_t ISM_HDU_TRC_BUF =          0xb426; //iSM trace buffer readout
            const uint16_t ISM_FWSTARTADDRESS =       0xa800; //Start of the firmware program address space (page1 or page2)
            const uint16_t ISM_FW_RAM_VERSION_MSB =   0xabfe; //Location of the RAM firmware revision (at page1)
            const uint16_t ISM_FW_RAM_VERSION_LSB =   0xabff; //Location of the RAM firmware revision (at page1)

            const uint16_t RECONFIG_TRIGGER              =     0xb218;
            const uint16_t RECONFIG_COUNTER              =     0xb219;
            const uint16_t RECONFIG_FRAMERATE            =     0xb080;
            const uint16_t RECONFIG_CFGCNT_S00_EXPOTIME  =     0xb081;
            const uint16_t RECONFIG_CFGCNT_S00_FRAMERATE =     0xb082;
            const uint16_t RECONFIG_CFGCNT_S00_PS        =     0xb083;
            const uint16_t RECONFIG_CFGCNT_S16_FRAMERATE =     0xb0b2;
            const uint16_t RECONFIG_CFGCNT_S16_PS        =     0xb0b3;
            const uint16_t RECONFIG_CFGCNT_PLLCFG1_LUT1  =     0xb0b4;
        }
    }
}


